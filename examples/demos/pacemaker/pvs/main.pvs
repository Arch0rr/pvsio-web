main: THEORY BEGIN
  IMPORTING pacemaker

  State: TYPE = [#
    device: pacemaker.State,
    %-- pacemaker outputs
    AP: int,
    VP: int,
    %-- pacemaker inputs
    Aget: real,
    Vget: real
  #]

  init(x: real): State = (#
    device := init_pacemaker,
    %-- pacemaker outputs
    AP := 0,
    VP := 0,
    %-- pacemaker inputs
    Aget := 0,
    Vget := 0
  #)

  InputState: TYPE = [#
    Aget: real,
    Vget: real
  #]

  initialInputState: InputState = (#
    Aget := 0,
    Vget := 0
  #)

  %-- execution of one tick
  pacemaker_tick_aux(is: InputState)(st: State): State =
    LET st = st WITH [ Aget := is`Aget, Vget := is`Vget ],
    	%-- update here AP VP
	st = st WITH [ device := exec(1)(device(st)) ]
     IN st WITH [ AP := per_APevent(device(st)),
     	   	  VP := per_VPevent(device(st)) ]

  %-- execution of n ticks
  pacemaker_tick(fuel: nat)(is: InputState)(st: State): RECURSIVE State =
    IF fuel = 0 THEN st
    ELSE LET st_prime = pacemaker_tick_aux(is)(st) IN pacemaker_tick(fuel - 1)(is)(st_prime) ENDIF
   MEASURE fuel

  %-- test execution
  test1: State = pacemaker_tick(5)(initialInputState)(init(0))

 END main
