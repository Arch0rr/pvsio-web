AVI: THEORY
 BEGIN

  IMPORTING constants

  Mode: TYPE = { Idle, AVI, WaitURI }

  state: TYPE = [#
    time: real,
    clk : real,
    mode: Mode
  #]

  init_AVI: state = (# time := 0, clk := 0, mode := Idle #)  

  per_ASin(st: state): bool = mode(st) = Idle
  ASin(st: (per_ASin)): state = st WITH [ time := 0, mode := AVI ]

  per_APin(st: state): bool = mode(st) = Idle
  APin(st: (per_APin)): state = ASin(st)

  per_VSin(st: state): bool = mode(st) = AVI OR mode(st) = WaitURI
  VSin(st: (per_VSin)): state = st WITH [ mode := Idle ]

  per_VPout(st: state): boolean =
    (mode(st) = AVI AND time(st) >= TAVI AND clk(st) >= TURI)
     OR (mode(st) = WaitURI AND clk(st) >= TURI)
  VPout(st: (per_VPout)): state = st WITH [ mode := Idle ]

  per_delay(st: state): bool = (mode(st) = AVI AND time(st) < TAVI) OR (mode(st) = WaitURI AND clk(st) < TURI)
  per_tick(st: state): boolean = 
    (mode(st) = AVI AND time(st) >= TAVI AND clk(st) < TURI)
     OR per_delay(st)
  tick(st: (per_tick)): state = 
   COND
    (mode(st) = AVI AND time(st) >= TAVI AND clk(st) < TURI)
     -> st WITH [ mode := WaitURI ],
    (mode(st) = AVI AND time(st) < TAVI)
     OR (mode(st) = WaitURI AND clk(st) < TURI)
     -> st WITH [ clk := clk(st) + 1 ]
   ENDCOND
    
  
  advance_time(st: state): state = st WITH [ time := time(st) + 1 ]

 END AVI
