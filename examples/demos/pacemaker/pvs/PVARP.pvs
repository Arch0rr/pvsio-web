PVARP: THEORY
 BEGIN

  IMPORTING constants

  Mode: TYPE = { Idle, inter, inter1, PVAB, PVARP }

  state: TYPE = [#
    time: real,
    mode: Mode
  #]

  init_PVARP: state = (# time := 0, mode := Idle #)  

  per_VPin(st: state): bool = mode(st) = Idle
  VPin(st: (per_VPin)): state = (# time := 0, mode := PVAB #)

  per_VSin(st: state): bool = mode(st) = Idle
  VSin(st: (per_VSin)): state = VPin(st)

  per_Agetin(st: state): bool = mode(st) = Idle OR mode(st) = PVARP
  Agetin(st: (per_Agetin)): state = 
   COND
    mode(st) = Idle -> st WITH [ mode := inter ],
    mode(st) = PVARP -> st WITH [ mode := inter1 ]
   ENDCOND

  per_ASout(st: state): bool = mode(st) = inter
  ASout(st: (per_ASout)): state = st WITH [ mode := Idle ]

  per_ARout(st: state): bool = mode(st) = inter1
  ARout(st: (per_ARout)): state = st WITH [ mode := PVARP ]

  per_tick(st: state): boolean = 
    (mode(st) = PVAB AND time(st) >= TPVAB)
     OR (mode(st) = PVARP AND time(st) >= TPVARP)
  tick(st: (per_tick)): state = 
   COND 
    mode(st) = PVAB  -> st WITH [ mode := PVARP ],
    mode(st) = PVARP -> st WITH [ mode := Idle ]
   ENDCOND

  advance_time(st: state): state = st WITH [ time := time(st) + 1 ]

 END PVARP
