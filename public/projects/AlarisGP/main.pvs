main: THEORY
 BEGIN
  IMPORTING alarisGP

  %{"_block" : "BlockStart", "_id" : "StateName", "_type": "Nodes"}
  StateName: TYPE = { Idle, Inc, Dec };
  %{"_block" : "BlockEnd", "_id" : "StateName", "_type": "Nodes"}

  %{"_block" : "BlockStart", "_id" : "State", "_type": "State"}
  State: TYPE = [#
    alaris_state: state,
    current_state: StateName,
    previous_state: StateName
  #]
  %{"_block" : "BlockEnd", "_id" : "State", "_type": "State"}
  
  initial_state: State = (#
    alaris_state := init(0),
    current_state := Idle,
    previous_state := Idle
  #)

  %{"_block" : "BlockStart", "_id" : "leave_state", "_type": "Function"}
  leave_state(s: StateName)(st: State): State = st WITH [ previous_state := s ] 
  %{"_block" : "BlockEnd", "_id" : "leave_state", "_type": "Function"}
  %{"_block" : "BlockStart", "_id" : "enter_into", "_type": "Function"}
  enter_into(s: StateName)(st: State): State = st WITH [ current_state := s ] 
  %{"_block" : "BlockEnd", "_id" : "enter_into", "_type": "Function"}

  %{"_block": "BlockStart" , "_id" : "user_press_UP", "_type": "Permission"}
  per_user_press_UP(st: State) : bool = 
     current_state(st) = Idle OR current_state(st) = Inc
  %{"_block": "BlockEnd" , "_id" : "user_press_UP", "_type": "Permission"}  

  %{"_block": "BlockStart" , "_id" : "user_press_UP", "_type": "Edge"}
  user_press_UP(st: (per_user_press_UP)): State = 
  COND
  %{"_block": "BlockStart", "_id" : "user_press_UP", "_source" : "Idle", "_target" : "Inc", "_type": "Transition"}
     st`current_state = Idle
    -> LET new_st = leave_state(Idle)(st),
           new_st = new_st WITH [ alaris_state := press_UP(new_st`alaris_state) ]
        IN enter_into(Inc)(new_st),
  %{"_block": "BlockEnd", "_id" : "user_press_UP", "_source" : "Idle", "_target" : "Inc", "_type": "Transition"} 
  %{"_block": "BlockStart", "_id" : "user_press_UP", "_source" : "Inc", "_target" : "Inc", "_type": "Transition"}
     st`current_state = Inc
    -> LET new_st = leave_state(Inc)(st),
           new_st = new_st WITH [ alaris_state := press_UP(new_st`alaris_state) ]
        IN enter_into(Inc)(new_st)
  %{"_block": "BlockEnd", "_id" : "user_press_UP", "_source" : "Inc", "_target" : "Inc", "_type": "Transition"} 
  ENDCOND
  %{"_block": "BlockEnd" , "_id" : "user_press_UP", "_type": "Edge"}

  %{"_block": "BlockStart" , "_id" : "user_release_UP", "_type": "Permission"}
  per_user_release_UP(st: State) : bool = current_state(st) = Inc
  %{"_block": "BlockEnd" , "_id" : "user_release_UP", "_type": "Permission"}  

  %{"_block": "BlockStart" , "_id" : "user_release_UP", "_type": "Edge"}
  user_release_UP(st: (per_user_release_UP)): State = 
  COND
  %{"_block": "BlockStart", "_id" : "user_release_UP", "_source" : "Inc", "_target" : "Idle", "_type": "Transition"}
     st`current_state = Inc
    -> LET new_st = leave_state(Inc)(st),
           new_st = new_st WITH [ alaris_state := release_UP(new_st`alaris_state) ]
        IN enter_into(Idle)(new_st)
  %{"_block": "BlockEnd", "_id" : "user_release_UP", "_source" : "Inc", "_target" : "Idle", "_type": "Transition"} 
  ENDCOND
  %{"_block": "BlockEnd" , "_id" : "user_release_UP", "_type": "Edge"}


  %{"_block": "BlockStart" , "_id" : "user_press_DN", "_type": "Permission"}
  per_user_press_DN(st: State) : bool = 
  	current_state(st) = Idle OR current_state(st) = Dec
  %{"_block": "BlockEnd" , "_id" : "user_press_DN", "_type": "Permission"}  

  %{"_block": "BlockStart" , "_id" : "user_press_DN", "_type": "Edge"}
  user_press_DN(st: (per_user_press_DN)): State = 
  COND
  %{"_block": "BlockStart", "_id" : "user_press_DN", "_source" : "Idle", "_target" : "Dec", "_type": "Transition"}
     st`current_state = Idle
    -> LET new_st = leave_state(Idle)(st),
           new_st = new_st WITH [ alaris_state := press_DN(new_st`alaris_state) ]
        IN enter_into(Dec)(new_st),
  %{"_block": "BlockEnd", "_id" : "user_press_DN", "_source" : "Idle", "_target" : "Dec", "_type": "Transition"} 
  %{"_block": "BlockStart", "_id" : "user_press_DN", "_source" : "Dec", "_target" : "Dec", "_type": "Transition"}
     st`current_state = Dec
    -> LET new_st = leave_state(Dec)(st),
           new_st = new_st WITH [ alaris_state := press_DN(new_st`alaris_state) ]
        IN enter_into(Dec)(new_st)
  %{"_block": "BlockEnd", "_id" : "user_press_DN", "_source" : "Dec", "_target" : "Dec", "_type": "Transition"} 
  ENDCOND
  %{"_block": "BlockEnd" , "_id" : "user_press_DN", "_type": "Edge"}

  %{"_block": "BlockStart" , "_id" : "user_release_DN", "_type": "Permission"}
  per_user_release_DN(st: State) : bool = current_state(st) = Dec
  %{"_block": "BlockEnd" , "_id" : "user_release_DN", "_type": "Permission"}  

  %{"_block": "BlockStart" , "_id" : "user_release_DN", "_type": "Edge"}
  user_release_DN(st: (per_user_release_DN)): State = 
  COND
  %{"_block": "BlockStart", "_id" : "user_release_DN", "_source" : "Dec", "_target" : "Idle", "_type": "Transition"}
     st`current_state = Dec
    -> LET new_st = leave_state(Dec)(st),
           new_st = new_st WITH [ alaris_state := release_DN(new_st`alaris_state) ]
        IN enter_into(Idle)(new_st)
  %{"_block": "BlockEnd", "_id" : "user_release_DN", "_source" : "Dec", "_target" : "Idle", "_type": "Transition"} 
  ENDCOND
  %{"_block": "BlockEnd" , "_id" : "user_release_DN", "_type": "Edge"}

 END main
